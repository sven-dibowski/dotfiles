" .ideavimrc is a configuration file for IdeaVim plugin. It uses
"   the same commands as the original .vimrc configuration.
" You can find a list of commands here: https://jb.gg/h38q75
" Find more examples here: https://jb.gg/share-ideavimrc

"" Base Settings
"" ========================================================
set scrolloff=10
set relativenumber
set showmode
set showcmd
set visualbell
"set clipboard+=unnamed
set clipboard^=unnamed,unnamedplus

"" -- Search improvements --
set ignorecase
set smartcase
set incsearch
set hlsearch

"" -- Leader key assignment --
let mapleader = " "

"" Plugin Settings
"" ========================================================
set highlightedyank
set nerdtree

" Which-key settings
set which-key
set notimeout
let g:WhichKey_FontSize = 16

nmap <leader>R :action :cursive.repl.actions/load-file<CR>
nmap <S-CR> :action :cursive.repl.actions/run-last-sexp<CR>
nmap <C-CR> :action :cursive.repl.actions/run-top-sexp<CR>

"" ---------------------------------------------------
let g:WhichKey_ShowVimActions = "true"

"" Key mappings
"" ========================================================
" redo
noremap U <C-r>

" map black hole register
noremap \ "_

" paste over without overwriting default register
xnoremap p P

" sync Vim clipboard with OS clipboard


" jump between angle brackets
set matchpairs+=<:>

" smart line joining
set ideajoin

" open config
noremap <leader>cc :edit ~/.ideavimrc<cr>

" source config 
noremap <leader>cs :source ~/.ideavimrc<cr>:nohlsearch<cr>

" highlight search results

" remove search highlights
noremap <Esc> :nohlsearch<cr>

" case-insensitive search

" enable case-sensitive search when uppercased letter is present

" move to the beginning of the next word
map w [w

" move to the end of the next word
map e ]w

" move to the beginning of the previous word
map b [b

" to the end of the previous word
map ge ]b

" splits

map <C-Left> <C-w>h
map <C-Down> <C-w>j
map <C-Up> <C-w>k
map <C-Right> <C-w>l

map <leader>wv <Action>(SplitVertically)
map <leader>wh <Action>(SplitHorizontally)
map <leader>ww <Action>(Unsplit)
map <leader>wa <Action>(UnsplitAll)

" video 7

let g:WhichKeyDesc_display = "<leader>d Display options"
" Display options
map <leader>dd <action>(ToggleDistractionFreeMode)
map <leader>dz <action>(ToggleZenMode)
map <leader>df <action>(ToggleFullScreen)


" Open NERDTree (use q to exit)
map <leader>x :NERDTreeToggle<CR>
